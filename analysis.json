{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`number-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n* specify the decimal separator (the value will still be a Number object)\n* use percent-format\n\nExample:\n```html\n<number-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></number-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n### Styling\nCustom property                   | Description                                  | Default\n----------------------------------|----------------------------------------------|--------------------\n`--number-input`                  | style of the input                           | {}\n`--number-input-focus`            | style of the focussed and hovered input      | {}\n`--number-input-placeholder`      | style of the placeholder                     | {}\n`--number-input-color`            | color of the input                           | inherit\n`--number-input-background`       | background of the input                      | inherit\n`--number-input-focus-color`      | color of the focussed and hovered input      | inherit\n`--number-input-focus-background` | background of the focussed and hovered input | rgba(0,0,0,0.1)\n`--number-input-disabled-color`   | color of the disabled input                  | inherit\n\n```css\n:host {\n  --number-input-disabled-color: grey;\n  --number-input-focus-background: rgba(0,0,0,0.25);\n  --number-input-focus: {\n    font-weight: bold;\n  };\n  --number-input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_computeMinWidth\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "disable autosizing",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 152,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noAutoWidthChanged\""
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "alwaysSign",
          "type": "string",
          "description": "always put the sign in the beginning",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 179,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 202,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 223,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 10
            },
            "end": {
              "line": 251,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_longestStaticLength",
          "type": "number",
          "description": "longest number-string of the given range",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 10
            },
            "end": {
              "line": 261,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 10
            },
            "end": {
              "line": 269,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 10
            },
            "end": {
              "line": 296,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 10
            },
            "end": {
              "line": 305,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_regExpDecimalSeparator",
          "type": "RegExp",
          "description": "regular expression to detect the decimal separator",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "regular expression to replace non-numeric parts of a number string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 10
            },
            "end": {
              "line": 323,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 340,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 363,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_startIncrem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 6
            },
            "end": {
              "line": 399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_stopIncrem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 401,
              "column": 6
            },
            "end": {
              "line": 405,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 753,
              "column": 6
            },
            "end": {
              "line": 775,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 663,
              "column": 6
            },
            "end": {
              "line": 684,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeLongestStatic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 686,
              "column": 6
            },
            "end": {
              "line": 688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minlength"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeChWidth",
          "description": "approximation of the ch-width of a number-string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 6
            },
            "end": {
              "line": 448,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeEmWidth",
          "description": "approximation of the width of a string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "placeholder"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 491,
              "column": 12
            },
            "end": {
              "line": 526,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            },
            {
              "name": "oldinput"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 727,
              "column": 6
            },
            "end": {
              "line": 751,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 551,
              "column": 6
            },
            "end": {
              "line": 555,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 6
            },
            "end": {
              "line": 562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 777,
              "column": 6
            },
            "end": {
              "line": 790,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_noAutoWidthChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 6
            },
            "end": {
              "line": 581,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 586,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 6
            },
            "end": {
              "line": 615,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 617,
              "column": 6
            },
            "end": {
              "line": 627,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeFormatValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 640,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formatNumber"
            },
            {
              "name": "unit"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 6
            },
            "end": {
              "line": 661,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeRegExpDecimalSeparator",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 6
            },
            "end": {
              "line": 692,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeRegExpNotInNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 694,
              "column": 6
            },
            "end": {
              "line": 696,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_unitChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 698,
              "column": 6
            },
            "end": {
              "line": 725,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 6
            },
            "end": {
              "line": 802,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 889,
          "column": 4
        },
        "end": {
          "line": 894,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "NumberInput",
      "attributes": [
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "no-auto-width",
          "description": "disable autosizing",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 152,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "always-sign",
          "description": "always put the sign in the beginning",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 179,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 202,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 223,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "unit",
          "description": "unit of the value",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 10
            },
            "end": {
              "line": 296,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 10
            },
            "end": {
              "line": 305,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "number-input",
      "mixins": [
        "NumberInputMixin"
      ]
    },
    {
      "description": "`integer-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n\nExample:\n```html\n<integer-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></integer-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n### Styling\nCustom property                   | Description                                  | Default\n----------------------------------|----------------------------------------------|--------------------\n`--number-input`                  | style of the input                           | {}\n`--number-input-focus`            | style of the focussed and hovered input      | {}\n`--number-input-placeholder`      | style of the placeholder                     | {}\n`--number-input-color`            | color of the input                           | inherit\n`--number-input-background`       | background of the input                      | inherit\n`--number-input-focus-color`      | color of the focussed and hovered input      | inherit\n`--number-input-focus-background` | background of the focussed and hovered input | rgba(0,0,0,0.1)\n`--number-input-disabled-color`   | color of the disabled input                  | inherit\n\n```css\n:host {\n  --number-input-disabled-color: grey;\n  --number-input-focus-background: rgba(0,0,0,0.25);\n  --number-input-focus: {\n    font-weight: bold;\n  };\n  --number-input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 36,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 26,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 52,
              "column": 10
            },
            "end": {
              "line": 55,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "string",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 85,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 42,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"decimal\"",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Option is disabled for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 36,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Option is disabled for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 10
            },
            "end": {
              "line": 44,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 117,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 182,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "[number]",
              "description": "[factor]"
            },
            {
              "name": "b",
              "type": "[number]",
              "description": "[factor]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[product]"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "[number]",
              "description": "[summand]"
            },
            {
              "name": "b",
              "type": "[number]",
              "description": "[summand]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[sum]"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 133,
          "column": 4
        },
        "end": {
          "line": 138,
          "column": 5
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "IntegerInput",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 36,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 26,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 85,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 42,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Option is disabled for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 36,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Option is disabled for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 10
            },
            "end": {
              "line": 44,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "integer-input",
      "mixins": [
        "IntegerInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a number-input",
      "summary": "",
      "path": "number-input.html",
      "properties": [
        {
          "name": "padLength",
          "type": "number",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "placeholder",
          "type": "string",
          "description": "placeholder string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_computeMinWidth\""
            }
          }
        },
        {
          "name": "noAutoWidth",
          "type": "boolean",
          "description": "disable autosizing",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 152,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_noAutoWidthChanged\""
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "input",
          "type": "string",
          "description": "string value of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_inputChanged\""
            }
          }
        },
        {
          "name": "alwaysSign",
          "type": "string",
          "description": "always put the sign in the beginning",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 179,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          }
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "\"decimal\""
        },
        {
          "name": "useGrouping",
          "type": "boolean",
          "description": "if true the number will be grouped according to the locale.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 202,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "startAt",
          "type": "number",
          "description": "start where to increment the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "minlength",
          "type": "number",
          "description": "minimum character width of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 223,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "unit",
          "type": "string",
          "description": "unit of the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          }
        },
        {
          "name": "_minimumFractionDigits",
          "type": "number",
          "description": "minimum digits right to the decimal separator",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 237,
              "column": 10
            },
            "end": {
              "line": 240,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_minimumIntegerDigits",
          "type": "number",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 10
            },
            "end": {
              "line": 251,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_longestStaticLength",
          "type": "number",
          "description": "longest number-string of the given range",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 257,
              "column": 10
            },
            "end": {
              "line": 261,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          }
        },
        {
          "name": "_numberOptions",
          "type": "number",
          "description": "number format options",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 266,
              "column": 10
            },
            "end": {
              "line": 269,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "formatNumber",
          "type": "Function",
          "description": "number format function",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          }
        },
        {
          "name": "parseNumber",
          "type": "Function",
          "description": "function to parse the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\"",
              "readOnly": true
            }
          }
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 10
            },
            "end": {
              "line": 296,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 10
            },
            "end": {
              "line": 305,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_regExpDecimalSeparator",
          "type": "RegExp",
          "description": "regular expression to detect the decimal separator",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 311,
              "column": 10
            },
            "end": {
              "line": 314,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_regExpNotInNumber",
          "type": "RegExp",
          "description": "regular expression to replace non-numeric parts of a number string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 320,
              "column": 10
            },
            "end": {
              "line": 323,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 333,
              "column": 6
            },
            "end": {
              "line": 340,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 6
            },
            "end": {
              "line": 345,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_addEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 347,
              "column": 6
            },
            "end": {
              "line": 354,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_removeEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 356,
              "column": 6
            },
            "end": {
              "line": 363,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 6
            },
            "end": {
              "line": 391,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_startIncrem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 393,
              "column": 6
            },
            "end": {
              "line": 399,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ]
        },
        {
          "name": "_stopIncrem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 401,
              "column": 6
            },
            "end": {
              "line": 405,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_increm",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 753,
              "column": 6
            },
            "end": {
              "line": 775,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            }
          ]
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 663,
              "column": 6
            },
            "end": {
              "line": 684,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ]
        },
        {
          "name": "_computeLongestStatic",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 686,
              "column": 6
            },
            "end": {
              "line": 688,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minlength"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            }
          ]
        },
        {
          "name": "_computeChWidth",
          "description": "approximation of the ch-width of a number-string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 443,
              "column": 6
            },
            "end": {
              "line": 448,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ]
        },
        {
          "name": "_computeEmWidth",
          "description": "approximation of the width of a string",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 451,
              "column": 6
            },
            "end": {
              "line": 456,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ]
        },
        {
          "name": "_computeMinWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 458,
              "column": 6
            },
            "end": {
              "line": 461,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "placeholder"
            }
          ]
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 463,
              "column": 6
            },
            "end": {
              "line": 465,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 491,
              "column": 12
            },
            "end": {
              "line": 526,
              "column": 13
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            },
            {
              "name": "oldinput"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 727,
              "column": 6
            },
            "end": {
              "line": 751,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ]
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 551,
              "column": 6
            },
            "end": {
              "line": 555,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_debouncedComputeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 557,
              "column": 6
            },
            "end": {
              "line": 562,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ]
        },
        {
          "name": "_computeWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 777,
              "column": 6
            },
            "end": {
              "line": 790,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ]
        },
        {
          "name": "_noAutoWidthChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 575,
              "column": 6
            },
            "end": {
              "line": 581,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "noAutoWidth"
            }
          ]
        },
        {
          "name": "focus",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 586,
              "column": 6
            },
            "end": {
              "line": 591,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "blur",
          "description": "focus the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 596,
              "column": 6
            },
            "end": {
              "line": 599,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ]
        },
        {
          "name": "_computeNumberOptions",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 601,
              "column": 6
            },
            "end": {
              "line": 615,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "minimumIntegerDigits"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "useGrouping"
            },
            {
              "name": "style"
            },
            {
              "name": "currency"
            },
            {
              "name": "currencyDisplay"
            }
          ]
        },
        {
          "name": "_computeFormatNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 617,
              "column": 6
            },
            "end": {
              "line": 627,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "numberOptions"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "unit"
            }
          ]
        },
        {
          "name": "_computeParseNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 629,
              "column": 6
            },
            "end": {
              "line": 638,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            },
            {
              "name": "groupingSeparator"
            },
            {
              "name": "numberStyle"
            }
          ]
        },
        {
          "name": "_computeFormatValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 640,
              "column": 6
            },
            "end": {
              "line": 644,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "formatNumber"
            },
            {
              "name": "unit"
            }
          ]
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 646,
              "column": 6
            },
            "end": {
              "line": 661,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ]
        },
        {
          "name": "_computeRegExpDecimalSeparator",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 690,
              "column": 6
            },
            "end": {
              "line": 692,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            }
          ]
        },
        {
          "name": "_computeRegExpNotInNumber",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 694,
              "column": 6
            },
            "end": {
              "line": 696,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "decimalSeparator"
            }
          ]
        },
        {
          "name": "_unitChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 698,
              "column": 6
            },
            "end": {
              "line": 725,
              "column": 7
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 6
            },
            "end": {
              "line": 802,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 15,
          "column": 2
        },
        "end": {
          "line": 832,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "NumberInputMixin",
      "attributes": [
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 131,
              "column": 10
            },
            "end": {
              "line": 133,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "placeholder",
          "description": "placeholder string",
          "sourceRange": {
            "start": {
              "line": 139,
              "column": 10
            },
            "end": {
              "line": 142,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "no-auto-width",
          "description": "disable autosizing",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 10
            },
            "end": {
              "line": 152,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 10
            },
            "end": {
              "line": 160,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "input",
          "description": "string value of the input",
          "sourceRange": {
            "start": {
              "line": 166,
              "column": 10
            },
            "end": {
              "line": 170,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "always-sign",
          "description": "always put the sign in the beginning",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 10
            },
            "end": {
              "line": 179,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Possible values are \"decimal\" for plain number formatting, \"currency\" for currency formatting, and \"percent\" for percent formatting; the default is \"decimal\".\nnotice: min, max and step are not in percent (so e.g. if step is 0.01, it means that the step is 1%)",
          "sourceRange": {
            "start": {
              "line": 185,
              "column": 10
            },
            "end": {
              "line": 188,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "use-grouping",
          "description": "if true the number will be grouped according to the locale.",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 10
            },
            "end": {
              "line": 195,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Possible values are the ISO 4217 currency codes, such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB — see http://www.currency-iso.org/en/home/tables/table-a1.html. There is no default value; if the style is \"currency\", the currency property must be provided.",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 10
            },
            "end": {
              "line": 202,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, \"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 10
            },
            "end": {
              "line": 209,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "start-at",
          "description": "start where to increment the value",
          "sourceRange": {
            "start": {
              "line": 214,
              "column": 10
            },
            "end": {
              "line": 216,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "minlength",
          "description": "minimum character width of the input",
          "sourceRange": {
            "start": {
              "line": 221,
              "column": 10
            },
            "end": {
              "line": 223,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "unit",
          "description": "unit of the value",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 10
            },
            "end": {
              "line": 231,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "format-number",
          "description": "number format function",
          "sourceRange": {
            "start": {
              "line": 274,
              "column": 10
            },
            "end": {
              "line": 278,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "parse-number",
          "description": "function to parse the input",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 10
            },
            "end": {
              "line": 287,
              "column": 11
            }
          },
          "metadata": {},
          "type": "Function"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "start": {
              "line": 293,
              "column": 10
            },
            "end": {
              "line": 296,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "start": {
              "line": 302,
              "column": 10
            },
            "end": {
              "line": 305,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntegerInputMixin"
      ]
    },
    {
      "description": "mixin to create a integer-input",
      "summary": "",
      "path": "integer-input.html",
      "properties": [
        {
          "name": "locale",
          "type": "string",
          "description": "The current locale",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimalSeparator",
          "type": "string",
          "description": "locale separator for local decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "groupingSeparator",
          "type": "string",
          "description": "locale separator for grouping decimal values",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 36,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "type": "number",
          "description": "minimal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "type": "number",
          "description": "maximal input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 26,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "stepMod",
          "type": "number",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_step",
          "type": "number",
          "description": "the used step, product of stepMod and step",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 52,
              "column": 10
            },
            "end": {
              "line": 55,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "1",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "type": "string",
          "description": "value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "type": "number",
          "description": "default-value of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "type": "boolean",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "noClamp",
          "type": "boolean",
          "description": "if true, the value does not clamp according to the given step",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 85,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_updateValue\""
            }
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "type": "boolean",
          "description": "required attribute",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "type": "boolean",
          "description": "disables the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "type": "string",
          "description": "name of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 42,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_valueIsSet",
          "type": "boolean",
          "description": "is true when the value is not undefined",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 54,
              "column": 10
            },
            "end": {
              "line": 57,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {}
          },
          "defaultValue": "false",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "numberStyle",
          "type": "string",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "defaultValue": "\"decimal\""
        },
        {
          "name": "currency",
          "type": "string",
          "description": "The currency to use in currency formatting. Option is disabled for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 36,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "currencyDisplay",
          "type": "string",
          "description": "How to display the currency in currency formatting. Option is disabled for `integer-input`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 10
            },
            "end": {
              "line": 44,
              "column": 11
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_localeChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 74,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 68,
              "column": 6
            },
            "end": {
              "line": 71,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_minMaxChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 106,
              "column": 6
            },
            "end": {
              "line": 115,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 117,
              "column": 6
            },
            "end": {
              "line": 126,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 128,
              "column": 6
            },
            "end": {
              "line": 160,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_updateValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 162,
              "column": 6
            },
            "end": {
              "line": 166,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_checkStep",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 168,
              "column": 6
            },
            "end": {
              "line": 182,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "step"
            }
          ],
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeMult",
          "description": "emulating handwritten multiplication",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 190,
              "column": 6
            },
            "end": {
              "line": 215,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "[number]",
              "description": "[factor]"
            },
            {
              "name": "b",
              "type": "[number]",
              "description": "[factor]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[product]"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_safeAdd",
          "description": "emulating handwritten addition",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 223,
              "column": 6
            },
            "end": {
              "line": 244,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "[number]",
              "description": "[summand]"
            },
            {
              "name": "b",
              "type": "[number]",
              "description": "[summand]"
            }
          ],
          "return": {
            "type": "[type]",
            "desc": "[sum]"
          },
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "_stepChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 6
            },
            "end": {
              "line": 63,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "stepMod"
            }
          ]
        },
        {
          "name": "_computeInvalid",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 73,
              "column": 6
            },
            "end": {
              "line": 75,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "required"
            },
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_computeValueIsSet",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 77,
              "column": 6
            },
            "end": {
              "line": 79,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "validate",
          "description": "validates the input for iron-form",
          "privacy": "public",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 84,
              "column": 6
            },
            "end": {
              "line": 86,
              "column": 7
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "_attachDom",
          "description": "attach dom with `delegatesFocus: true` so that the element is also focussed while its's children are too, and to autofocus to first tabable",
          "privacy": "protected",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 91,
              "column": 6
            },
            "end": {
              "line": 100,
              "column": 7
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom"
            }
          ],
          "inheritedFrom": "FormElementMixin"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 2
        },
        "end": {
          "line": 79,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntegerInputMixin",
      "attributes": [
        {
          "name": "locale",
          "description": "The current locale",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 19,
              "column": 10
            },
            "end": {
              "line": 22,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "decimal-separator",
          "description": "locale separator for local decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 28,
              "column": 10
            },
            "end": {
              "line": 30,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "grouping-separator",
          "description": "locale separator for grouping decimal values",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\intl-number-format-mixin.html",
            "start": {
              "line": 36,
              "column": 10
            },
            "end": {
              "line": 38,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "IntlNumberFormatMixin"
        },
        {
          "name": "min",
          "description": "minimal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 17,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "max",
          "description": "maximal input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 26,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "step-mod",
          "description": "a step modifier. this is useful if you are having one step for multible elements that represent parts of numbers, like when you are having one input for the decimal part and one for the integer part.\nFor example:\n  * if `step` is `0.002` and the `step-mod` is `1000`, `2` will be used\n  * if `step` is `10` and the `step-mod` is `0.02`, `0.2` will be used",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 43,
              "column": 10
            },
            "end": {
              "line": 46,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "value",
          "description": "value of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 47,
              "column": 10
            },
            "end": {
              "line": 49,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "default",
          "description": "default-value of the input",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 70,
              "column": 10
            },
            "end": {
              "line": 72,
              "column": 11
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "saturate",
          "description": "if true, the value does not revolve the range according to the maximum or the minimum",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 77,
              "column": 10
            },
            "end": {
              "line": 80,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "no-clamp",
          "description": "if true, the value does not clamp according to the given step",
          "sourceRange": {
            "file": "bower_components\\property-mixins\\range-mixin.html",
            "start": {
              "line": 85,
              "column": 10
            },
            "end": {
              "line": 88,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "RangeMixin"
        },
        {
          "name": "required",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 16,
              "column": 10
            },
            "end": {
              "line": 19,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "invalid",
          "description": "required attribute",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 27,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "disabled",
          "description": "disables the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 32,
              "column": 10
            },
            "end": {
              "line": 35,
              "column": 11
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "name",
          "description": "name of the input",
          "sourceRange": {
            "file": "bower_components\\input-picker-pattern\\form-element-mixin.html",
            "start": {
              "line": 40,
              "column": 10
            },
            "end": {
              "line": 42,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string",
          "inheritedFrom": "FormElementMixin"
        },
        {
          "name": "number-style",
          "description": "The formatting style to use. Is always `decimal` for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 24,
              "column": 10
            },
            "end": {
              "line": 28,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "currency",
          "description": "The currency to use in currency formatting. Option is disabled for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 10
            },
            "end": {
              "line": 36,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        },
        {
          "name": "currency-display",
          "description": "How to display the currency in currency formatting. Option is disabled for `integer-input`.",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 10
            },
            "end": {
              "line": 44,
              "column": 11
            }
          },
          "metadata": {},
          "type": "string"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntlNumberFormatMixin",
        "RangeMixin",
        "FormElementMixin"
      ]
    }
  ]
}
