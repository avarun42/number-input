{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "`number-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n* specify the decimal separator (the value will still be a Number object)\n* use percent-format\n\nExample:\n```html\n<number-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></number-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n number-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "number-input.js",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "methods": [
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 248,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 373,
          "column": 0
        },
        "end": {
          "line": 378,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "NumberInput",
      "attributes": [
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "number-input",
      "mixins": [
        "NumberInputMixin"
      ]
    },
    {
      "description": "`integer-input` is an element that can:\n* prevent non numeric input\n* guarantee **live**-data to be valid\n* pad a value with `0` (to a specific length)\n* size the input (according to it's length)\n* overflow to minimum or underflow to maximum\n* saturate to minimum or to maximum\n* display a specified unit and size the input\n\nExample:\n```html\n<integer-input step=\"2\" min=\"-20\" max=\"140\" pad-length=\"2\"></integer-input>\n```\n\nIt sizes automatically. Use `key-up` and `key-down` to increment the value. If `step` is given, the value is a **multiple** of `step`.\n\n Have a look at [input-picker-pattern#input-shared-style](https://github.com/fooloomanzoo/input-picker-pattern#input-shared-style) to see how to style the element.\n\n```css\n integer-input {\n  --input-disabled-color: grey;\n  --input-focus-background: rgba(0,0,0,0.3);\n  --input-focus: {\n    font-weight: bold;\n  };\n  --input-placeholder: {\n    color: pink;\n  };\n}\n```",
      "summary": "",
      "path": "integer-input.js",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "methods": [
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 207,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 248,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 250,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_safeAdd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "_safeMult",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ],
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        },
        {
          "url": "demo/form.html",
          "description": "Form Demo"
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 96,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "IntegerInput",
      "attributes": [
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number",
          "inheritedFrom": "IntegerInputMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "IntegerInputMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "integer-input",
      "mixins": [
        "IntegerInputMixin"
      ]
    }
  ],
  "mixins": [
    {
      "description": "mixin to create a number-input",
      "summary": "",
      "path": "number-input.js",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\""
        }
      ],
      "methods": [
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 248,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 250,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 312,
              "column": 4
            },
            "end": {
              "line": 327,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "step"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 7
        },
        "end": {
          "line": 330,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "NumberInputMixin",
      "attributes": [
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "IntlNumberFormatMixin",
        "RangeMixin",
        "InputPattern"
      ]
    },
    {
      "description": "mixin to create a integer-input",
      "summary": "",
      "path": "integer-input.js",
      "properties": [
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "type of the input",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "padLength",
          "type": "number | null | undefined",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "autoPadding",
          "type": "boolean",
          "description": "enables auto padding",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "minimum digits right to the decimal separator",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimumIntegerDigits",
          "type": "number | null | undefined",
          "description": "minimum digits left to the decimal separator to pad",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "propertyForValue",
          "type": "string | null | undefined",
          "description": "defines the property that should be used for the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"valueAsNumber\"",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "step",
          "type": "number",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_stepChanged\"",
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "The maximum number of fraction digits to use",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        }
      ],
      "methods": [
        {
          "name": "reset",
          "description": "reset the value",
          "privacy": "public",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 142,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_checkKeycode",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 146,
              "column": 4
            },
            "end": {
              "line": 161,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_inputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 163,
              "column": 4
            },
            "end": {
              "line": 175,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "input"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 177,
              "column": 4
            },
            "end": {
              "line": 189,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_valueAsNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 191,
              "column": 4
            },
            "end": {
              "line": 198,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueAsNumber"
            },
            {
              "name": "oldValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_defaultChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 200,
              "column": 4
            },
            "end": {
              "line": 205,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "def"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeDefaultValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 207,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_confirmInput",
          "description": "update manually the value with the native input",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 217,
              "column": 4
            },
            "end": {
              "line": 230,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_updateInput",
          "description": "update manually the native input with the given value",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 235,
              "column": 4
            },
            "end": {
              "line": 248,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_formatNumberChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 250,
              "column": 4
            },
            "end": {
              "line": 254,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinlengthString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 267,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeType",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 269,
              "column": 4
            },
            "end": {
              "line": 281,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "numberOptions"
            },
            {
              "name": "decimalSeparator"
            },
            {
              "name": "unit"
            },
            {
              "name": "alwaysSign"
            },
            {
              "name": "padLength"
            },
            {
              "name": "autoPadding"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumIntegerDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 283,
              "column": 4
            },
            "end": {
              "line": 310,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autoPadding"
            },
            {
              "name": "padLength"
            },
            {
              "name": "def"
            },
            {
              "name": "startAt"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            },
            {
              "name": "step"
            },
            {
              "name": "numberStyle"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "_computeMinimumFractionDigits",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 38,
              "column": 4
            },
            "end": {
              "line": 40,
              "column": 5
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_safeAdd",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 4
            },
            "end": {
              "line": 44,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "_safeMult",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 7
        },
        "end": {
          "line": 50,
          "column": 3
        }
      },
      "privacy": "public",
      "name": "IntegerInputMixin",
      "attributes": [
        {
          "name": "type",
          "description": "type of the input",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 78,
              "column": 8
            },
            "end": {
              "line": 81,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "pad-length",
          "description": "length to pad the string (with `0`) according to the total amount of numbers",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 86,
              "column": 8
            },
            "end": {
              "line": 88,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "auto-padding",
          "description": "enables auto padding",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 94,
              "column": 8
            },
            "end": {
              "line": 96,
              "column": 9
            }
          },
          "metadata": {},
          "type": "boolean",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "minimum digits right to the decimal separator",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 101,
              "column": 8
            },
            "end": {
              "line": 104,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "minimum-integer-digits",
          "description": "minimum digits left to the decimal separator to pad",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 109,
              "column": 8
            },
            "end": {
              "line": 112,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "value",
          "description": "",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 114,
              "column": 8
            },
            "end": {
              "line": 117,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "property-for-value",
          "description": "defines the property that should be used for the value",
          "sourceRange": {
            "file": "number-input.js",
            "start": {
              "line": 122,
              "column": 8
            },
            "end": {
              "line": 125,
              "column": 9
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "NumberInputMixin"
        },
        {
          "name": "step",
          "description": "step for changing the input (referencing to `min` or `0`)",
          "sourceRange": {
            "start": {
              "line": 22,
              "column": 8
            },
            "end": {
              "line": 26,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "The maximum number of fraction digits to use",
          "sourceRange": {
            "start": {
              "line": 30,
              "column": 8
            },
            "end": {
              "line": 34,
              "column": 9
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "NumberInputMixin"
      ]
    }
  ]
}
